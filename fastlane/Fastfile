default_platform(:ios)

platform :ios do
  desc "Export ipa"
  lane :export_ipa do
    keychain_password = SecureRandom.uuid

    create_keychain(
      name: "ios-build.keychain",
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    if ENV["CERTIFICATE_SPLIT"] == '1'
      import_certificate(
        certificate_path: "ios-build-key.p12",
        certificate_password: ENV["CERTIFICATE_PASSWORD"],
        keychain_name: "ios-build.keychain",
        keychain_password: keychain_password,
        log_output: true
      )
      import_certificate(
        certificate_path: "ios-build-key.cer",
        certificate_password: ENV["CERTIFICATE_PASSWORD"],
        keychain_name: "ios-build.keychain",
        keychain_password: keychain_password,
        log_output: true
      )
    else
      import_certificate(
        certificate_path: "ios-build.p12",
        certificate_password: ENV["CERTIFICATE_PASSWORD"],
        keychain_name: "ios-build.keychain",
        keychain_password: keychain_password,
        log_output: true
      )
    end

    install_provisioning_profile(
      path: "ios-build.mobileprovision"
    )

    update_targets = nil
    update_targets_env = ENV["UPDATE_TARGETS"]
    disable_targets_env = ENV['DISABLE_TARGETS']
    if !update_targets_env.empty?
      update_targets = update_targets_env.split(/\R/)
    elsif !disable_targets_env.empty?
      update_targets = disable_targets_env.split(/,/)
    end

    update_code_signing_settings(
      use_automatic_signing: false,
      path: ENV["PROJECT_PATH"],
      code_sign_identity: ENV['CODE_SIGNING_IDENTITY'],
      targets: update_targets
    )

    update_project_provisioning(
      xcodeproj: ENV["PROJECT_PATH"],
      profile: "ios-build.mobileprovision",
      code_signing_identity: ENV["CODE_SIGNING_IDENTITY"]
    )

    update_project_team(
      path: ENV["PROJECT_PATH"],
      teamid: ENV["TEAM_ID"],
      targets: update_targets
    )

    if ENV["BUILD_PODS"] == 'true'
      cocoapods(
        podfile: ENV["PODS_PATH"]
      )
    end

    use_workspace = !ENV['WORKSPACE_PATH'].empty?
    build_app(
      workspace: use_workspace ? ENV['WORKSPACE_PATH'] : nil,
      project: !use_workspace ? ENV['PROJECT_PATH'] : nil,
      configuration: ENV['CONFIGURATION'],
      scheme: ENV['SCHEME'],
      output_directory: File.dirname(ENV['OUTPUT_PATH']),
      output_name: File.basename(ENV['OUTPUT_PATH']),
      clean: true,
      export_method: ENV['EXPORT_METHOD'],
    )

    if ENV["BROWSERSTACK_UPLOAD"] == 'true'
        upload_to_browserstack_app_live(
            browserstack_username: ENV["BROWSERSTACK_USERNAME"],
            browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
            file_path: ENV["OUTPUT_PATH"]
        )
    end

    delete_keychain(
      name: "ios-build.keychain"
    )
  end
end
