default_platform(:ios)

def dump_env_vars
  UI.message("=== Environment Variables ===")
  UI.message("APPLE_KEY_ID: #{ENV['APPLE_KEY_ID']}")
  UI.message("APPLE_KEY_ISSUER_ID: #{ENV['APPLE_KEY_ISSUER_ID']}")
  UI.message("APPLE_KEY_CONTENT: #{ENV['APPLE_KEY_CONTENT']}")
  UI.message("PROJECT_NAME: #{ENV['PROJECT_NAME']}")
  UI.message("IOS_APP_ID: #{ENV['IOS_APP_ID']}")
  UI.message("TEAM_ID: #{ENV['TEAM_ID']}")
  UI.message("MATCH_BUILD_TYPE: #{ENV['MATCH_BUILD_TYPE']}")
  UI.message("INCREMENT_BUILD_NUMBER: #{ENV['INCREMENT_BUILD_NUMBER']}")
  UI.message("WORKSPACE_PATH: #{ENV['WORKSPACE_PATH']}")
  UI.message("PROJECT_PATH: #{ENV['PROJECT_PATH']}")
  UI.message("CONFIGURATION: #{ENV['CONFIGURATION']}")
  UI.message("SCHEME: #{ENV['SCHEME']}")
  UI.message("OUTPUT_PATH: #{ENV['OUTPUT_PATH']}")
  UI.message("EXPORT_METHOD: #{ENV['EXPORT_METHOD']}")
  UI.message("===========================")
end

platform :ios do
  before_all do
    keychain_password = '12345678'

    create_keychain(
      name: "ios-build.keychain",
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    if ENV["BUILD_PODS"] == 'true'
      cocoapods(
        podfile: ENV["PODS_PATH"],
        use_bundle_exec: false
      )
    end
  end

  desc "Build"
  lane :build do
    dump_env_vars
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_KEY_ISSUER_ID'],
      key_content: ENV['APPLE_KEY_CONTENT'],
      in_house: false # optional but may be required if using match/sigh
    )

    use_workspace = !ENV['WORKSPACE_PATH'].empty?
    match(type: ENV['MATCH_BUILD_TYPE'], api_key: api_key)

    if ENV['INCREMENT_BUILD_NUMBER'] == 'true'
      increment_build_number(
        xcodeproj: ENV['PROJECT_PATH'],
        build_number: (latest_testflight_build_number(
          app_identifier: ENV["IOS_APP_ID"],
          api_key: api_key,
          team_name: ENV["TEAM_NAME"],
        ) + 1).to_s,
      )
    end

    update_project_team(
      path: "apps/expo/ios/#{ENV['PROJECT_NAME']}.xcodeproj",
      targets: ENV['PROJECT_NAME'],
      teamid: ENV['TEAM_ID']
    )

    build_app(
      workspace: use_workspace ? ENV['WORKSPACE_PATH'] : nil,
      project: !use_workspace ? ENV['PROJECT_PATH'] : nil,
      configuration: ENV['CONFIGURATION'],
      scheme: ENV['SCHEME'],
      output_directory: File.dirname(ENV['OUTPUT_PATH']),
      output_name: File.basename(ENV['OUTPUT_PATH']),
      clean: true,
      export_method: ENV['EXPORT_METHOD'],
      export_team_id: ENV['TEAM_ID'],
      silent: true,
     export_options: {
        provisioningProfiles: {
          "#{ENV['IOS_APP_ID']}" => "match AppStore #{ENV['IOS_APP_ID']}",
        },
      }
    )

    if ENV["BROWSERSTACK_UPLOAD"] == 'true'
      upload_to_browserstack_app_live(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: ENV["OUTPUT_PATH"]
      )
    end

    if ENV["TESTFLIGHT_UPLOAD"] == 'true'
      upload_to_testflight(
        ipa: File.join(File.dirname(ENV['OUTPUT_PATH']), File.basename(ENV['OUTPUT_PATH'])),
        api_key: api_key,
        app_identifier: ENV['IOS_APP_ID'],
        team_name: ENV['TEAM_NAME'],
        skip_waiting_for_build_processing: true,
        skip_submission: true,
      )
    end
  end

  after_all do
    delete_keychain(
      name: "ios-build.keychain"
    )
  end
end
